const std = @import("std");
const HkdfSha256 = std.crypto.kdf.hkdf.HkdfSha256;

fn generateCommonInitialSecret(client_destination_connection_id: []const u8) [32]u8 {
    const initial_salt = [_]u8{
        0x38, 0x76, 0x2c, 0xf7, 0xf5, 0x59, 0x34, 0xb3,
        0x4d, 0x17, 0x9a, 0xe6, 0xa4, 0xc8, 0x0c, 0xad,
        0xcc, 0xbb, 0x7f, 0x0a,
    };
    return HkdfSha256.extract(&initial_salt, client_destination_connection_id);
}

test "initial_secret" {
    // This test case is brought from https://www.rfc-editor.org/rfc/rfc9001#section-a.1
    const client_dcid = [_]u8{
        0x83, 0x94, 0xc8, 0xf0, 0x3e, 0x51, 0x57, 0x08,
    };

    const got = generateCommonInitialSecret(&client_dcid);
    const expected = [_]u8{
        0x7d, 0xb5, 0xdf, 0x06, 0xe7, 0xa6, 0x9e, 0x43,
        0x24, 0x96, 0xad, 0xed, 0xb0, 0x08, 0x51, 0x92,
        0x35, 0x95, 0x22, 0x15, 0x96, 0xae, 0x2a, 0xe9,
        0xfb, 0x81, 0x15, 0xc1, 0xe9, 0xed, 0x0a, 0x44,
    };
    try std.testing.expectEqualSlices(u8, &expected, &got);
}
