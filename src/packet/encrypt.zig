const std = @import("std");
const mem = std.mem;
const Allocator = mem.Allocator;
const assert = std.debug.assert;
const Bytes = @import("../bytes.zig").Bytes;
const tls = @import("../tls.zig");

/// Encrypt both payload and header, returning an AEAD tag generated by the encryption procedure.
pub fn encrypt(
    header: []u8,
    payload: []u8,
    packet_num: u64,
    packet_num_len: usize,
    encryptor: tls.Cryptor,
) Allocator.Error![16]u8 {
    assert(packet_num_len <= 4);

    std.debug.print("AD: {}\n", .{std.fmt.fmtSliceHexLower(header)});

    const allocator = std.heap.page_allocator;
    var encrypted = try allocator.alloc(u8, payload.len);
    defer allocator.free(encrypted);

    const tag = encryptor.encryptPayload(packet_num, header, payload, encrypted);
    mem.copy(u8, payload, encrypted);
    std.debug.print("tag: {}\n", .{std.fmt.fmtSliceHexLower(&tag)});

    const sample_len = 16;
    var sample: [sample_len]u8 = undefined;
    const sample_offset = 4 - packet_num_len;
    mem.copy(u8, &sample, payload[sample_offset..(sample_offset + sample_len)]);

    encryptor.protectHeader(sample, &header[0], header[(header.len - packet_num_len)..]);

    return tag;
}
